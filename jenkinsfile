pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "6.2hd/nodejs-app"
        DOCKER_TAG = "latest"
        SONARQUBE_URL = "http://localhost:9000/"
        SONARQUBE_TOKEN = credentials('squ_46b45c903d6a8455e17b31e530f1d2ff016a614a') // Jenkins credential
    }

    stages {
        stage('Build') {
            steps {
                // Build your code and create a build artifact
                // Example: Maven build for a Java project
                sh 'mvn clean package'
                archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            }
        }
        
        stage('Test') {
            steps {
                // Run automated tests using a testing framework
                // Example: Running JUnit tests
                sh 'mvn test'
            }
        }
        
        stage('Code Quality Analysis') {
            steps {
                // Run code quality analysis using a tool like SonarQube
                // Example: SonarQube scanner
                sh 'sonar-scanner'
            }
        }
        
        stage('Deploy') {
            steps {
                // Deploy your application to a test environment
                // Example: Deploying to a Docker container
                sh 'docker-compose up -d'
            }
        }
        
        stage('Release') {
            steps {
                // Promote the application to a production environment
                // Example: Deploying to AWS using CodeDeploy
                sh 'aws deploy create-deployment --application-name MyApp --deployment-group-name MyDeploymentGroup --s3-location bucket=my-bucket,bundleType=zip,key=my-app.zip'
            }
        }
        
        stage('Monitoring and Alerting') {
            steps {
                // Monitor the application in production and set up alerts
                // Example: Configure alerts in Datadog
                sh 'datadog-agent run'
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
