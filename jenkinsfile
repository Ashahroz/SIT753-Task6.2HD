pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "6.2hd/nodejs-app"
        DOCKER_TAG = "latest"
        SONARQUBE_URL = "http://localhost:9000/"
        SONARQUBE_TOKEN = credentials('squ_46b45c903d6a8455e17b31e530f1d2ff016a614a') // Jenkins credential
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                script {
                    node {
                        // Install dependencies
                        sh 'npm install'
                        // Build Docker image
                        sh 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    node {
                        // Run tests
                        sh 'npm test'
                    }
                }
            }
            post {
                always {
                    script {
                        node {
                            // Publish test results
                            junit 'test-results.xml'
                        }
                    }
                }
            }
        }

        stage('Code Quality Analysis') {
            steps {
                script {
                    node {
                        // Run SonarQube analysis
                        withSonarQubeEnv('SonarQube') {
                            sh 'sonar-scanner -Dsonar.projectKey=nodejs-app -Dsonar.sources=. -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONARQUBE_TOKEN}'
                        }
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    node {
                        // Deploy Docker container to staging environment
                        sh 'docker run -d --name nodejs-app-staging -p 3000:3000 ${DOCKER_IMAGE}:${DOCKER_TAG}'
                    }
                }
            }
        }

        stage('Release to Production') {
            steps {
                input message: 'Approve deployment to production?', ok: 'Deploy'
                script {
                    node {
                        // Deploy Docker container to production environment
                        sh 'docker run -d --name nodejs-app-prod -p 80:3000 ${DOCKER_IMAGE}:${DOCKER_TAG}'
                    }
                }
            }
        }
    }

   //post {
     //   always {
       //     script {
         //       node {
           //         // Cleanup Docker containers
             //       sh 'docker rm -f nodejs-app-staging || true'
               //     sh 'docker rm -f nodejs-app-prod || true'
                 //   // Example post action - ensure it's within a node block
                   // sh 'echo Post actions...'
                    //// Monitoring and alerting setup (example using Datadog)
                    // datadogServiceCheck 'jenkins.job.status', 0, tags: ['job:nodejs-app-pipeline']
               // }
            //}
        //}

        success {
            script {
                node {
                    // Example of sending a successful job status to Datadog
                    // datadogServiceCheck 'jenkins.job.status', 0, tags: ['job:nodejs-app-pipeline']
                }
            }
        }

        failure {
            script {
                node {
                    // Handle failure actions
                    sh 'echo Handling failure...'
                    // Example of sending a failed job status to Datadog
                    // datadogSerceCheck 'jenkins.job.status', 2, tags: ['job:nodejs-app-pipeline']
                }
            }
        }
    }
////}
